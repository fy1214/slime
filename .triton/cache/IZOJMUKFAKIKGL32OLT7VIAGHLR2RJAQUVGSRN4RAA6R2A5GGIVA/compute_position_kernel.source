#loc = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":954:0)
#loc26 = loc("/usr/local/lib/python3.12/dist-packages/triton/language/standard.py":31:0)
module {
  tt.func public @compute_position_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":954:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":954:0), %arg2: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":954:0), %arg3: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":954:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = tt.addptr %arg2, %1 : !tt.ptr<i32>, i64 loc(#loc3)
    %3 = tt.load %2 : !tt.ptr<i32> loc(#loc4)
    %4 = tt.addptr %arg3, %1 : !tt.ptr<i32>, i64 loc(#loc5)
    %5 = tt.load %4 : !tt.ptr<i32> loc(#loc6)
    %c0_i32 = arith.constant 0 : i32 loc(#loc7)
    %6 = arith.extsi %c0_i32 : i32 to i64 loc(#loc7)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc8)
    %c1_i32 = arith.constant 1 : i32 loc(#loc8)
    %7 = arith.extsi %c0_i32_0 : i32 to i64 loc(#loc8)
    %8 = arith.bitcast %1 : i64 to i64 loc(#loc8)
    %9 = arith.extsi %c1_i32 : i32 to i64 loc(#loc8)
    %10 = ub.poison : i64 loc(#loc8)
    %11 = scf.for %arg4 = %7 to %8 step %9 iter_args(%arg5 = %6) -> (i64)  : i64 {
      %19 = tt.addptr %arg3, %arg4 : !tt.ptr<i32>, i64 loc(#loc9)
      %20 = tt.load %19 : !tt.ptr<i32> loc(#loc10)
      %21 = arith.extsi %20 : i32 to i64 loc(#loc11)
      %22 = arith.addi %arg5, %21 : i64 loc(#loc11)
      scf.yield %22 : i64 loc(#loc12)
    } loc(#loc8)
    %12 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_512_"(%5) : (i32) -> i32 loc(#loc13)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc14)
    %c1_i32_2 = arith.constant 1 : i32 loc(#loc14)
    %13 = arith.bitcast %c0_i32_1 : i32 to i32 loc(#loc14)
    %14 = arith.bitcast %12 : i32 to i32 loc(#loc14)
    %15 = arith.bitcast %c1_i32_2 : i32 to i32 loc(#loc14)
    %16 = ub.poison : i32 loc(#loc14)
    scf.for %arg4 = %13 to %14 step %15  : i32 {
      %19 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc15)
      %c512_i32 = arith.constant 512 : i32 loc(#loc16)
      %c512_i32_3 = arith.constant 512 : i32 loc(#loc16)
      %20 = arith.extsi %arg4 : i32 to i64 loc(#loc16)
      %21 = arith.extsi %c512_i32_3 : i32 to i64 loc(#loc16)
      %22 = arith.muli %20, %21 : i64 loc(#loc16)
      %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc16)
      %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc16)
      %23 = arith.cmpi sle, %22, %c2147483647_i64 : i64 loc(#loc16)
      %24 = arith.cmpi sge, %22, %c-2147483648_i64 : i64 loc(#loc16)
      %25 = arith.andi %23, %24 : i1 loc(#loc16)
      %26 = arith.muli %arg4, %c512_i32_3 : i32 loc(#loc16)
      %27 = tt.splat %26 : i32 -> tensor<512xi32> loc(#loc17)
      %28 = arith.extsi %19 : tensor<512xi32> to tensor<512xi64> loc(#loc17)
      %29 = arith.extsi %27 : tensor<512xi32> to tensor<512xi64> loc(#loc17)
      %30 = arith.addi %28, %29 : tensor<512xi64> loc(#loc17)
      %c2147483647_i64_4 = arith.constant 2147483647 : i64 loc(#loc17)
      %c-2147483648_i64_5 = arith.constant -2147483648 : i64 loc(#loc17)
      %cst = arith.constant dense<2147483647> : tensor<512xi64> loc(#loc17)
      %31 = arith.cmpi sle, %30, %cst : tensor<512xi64> loc(#loc17)
      %cst_6 = arith.constant dense<-2147483648> : tensor<512xi64> loc(#loc17)
      %32 = arith.cmpi sge, %30, %cst_6 : tensor<512xi64> loc(#loc17)
      %33 = arith.andi %31, %32 : tensor<512xi1> loc(#loc17)
      %34 = arith.addi %19, %27 : tensor<512xi32> loc(#loc17)
      %35 = tt.splat %5 : i32 -> tensor<512xi32> loc(#loc18)
      %36 = arith.cmpi slt, %34, %35 : tensor<512xi32> loc(#loc18)
      %37 = tt.addptr %arg0, %11 : !tt.ptr<i64>, i64 loc(#loc19)
      %38 = tt.splat %37 : !tt.ptr<i64> -> tensor<512x!tt.ptr<i64>> loc(#loc20)
      %39 = tt.addptr %38, %34 : tensor<512x!tt.ptr<i64>>, tensor<512xi32> loc(#loc20)
      %40 = tt.splat %3 : i32 -> tensor<512xi32> loc(#loc21)
      %41 = arith.extsi %40 : tensor<512xi32> to tensor<512xi64> loc(#loc21)
      %42 = arith.extsi %34 : tensor<512xi32> to tensor<512xi64> loc(#loc21)
      %43 = arith.addi %41, %42 : tensor<512xi64> loc(#loc21)
      %c2147483647_i64_7 = arith.constant 2147483647 : i64 loc(#loc21)
      %c-2147483648_i64_8 = arith.constant -2147483648 : i64 loc(#loc21)
      %cst_9 = arith.constant dense<2147483647> : tensor<512xi64> loc(#loc21)
      %44 = arith.cmpi sle, %43, %cst_9 : tensor<512xi64> loc(#loc21)
      %cst_10 = arith.constant dense<-2147483648> : tensor<512xi64> loc(#loc21)
      %45 = arith.cmpi sge, %43, %cst_10 : tensor<512xi64> loc(#loc21)
      %46 = arith.andi %44, %45 : tensor<512xi1> loc(#loc21)
      %47 = arith.addi %40, %34 : tensor<512xi32> loc(#loc21)
      %48 = arith.extsi %47 : tensor<512xi32> to tensor<512xi64> loc(#loc22)
      tt.store %39, %48, %36 : tensor<512x!tt.ptr<i64>> loc(#loc22)
    } loc(#loc14)
    %17 = tt.addptr %arg1, %1 : !tt.ptr<i32>, i64 loc(#loc23)
    %18 = arith.trunci %11 : i64 to i32 loc(#loc24)
    tt.store %17, %18 : !tt.ptr<i32> loc(#loc24)
    tt.return loc(#loc25)
  } loc(#loc)
  tt.func private @"triton.language.standard.cdiv__i32__(1,)cconstexpr_512_"(%arg0: i32 loc("/usr/local/lib/python3.12/dist-packages/triton/language/standard.py":31:0)) -> i32 attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32 loc(#loc27)
    %c512_i32_0 = arith.constant 512 : i32 loc(#loc27)
    %0 = arith.extsi %arg0 : i32 to i64 loc(#loc27)
    %1 = arith.extsi %c512_i32_0 : i32 to i64 loc(#loc27)
    %2 = arith.addi %0, %1 : i64 loc(#loc27)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc27)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc27)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc27)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc27)
    %5 = arith.andi %3, %4 : i1 loc(#loc27)
    %6 = arith.addi %arg0, %c512_i32_0 : i32 loc(#loc27)
    %c1_i32 = arith.constant 1 : i32 loc(#loc28)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc28)
    %7 = arith.extsi %6 : i32 to i64 loc(#loc28)
    %8 = arith.extsi %c1_i32_1 : i32 to i64 loc(#loc28)
    %9 = arith.subi %7, %8 : i64 loc(#loc28)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc28)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc28)
    %10 = arith.cmpi sle, %9, %c2147483647_i64_2 : i64 loc(#loc28)
    %11 = arith.cmpi sge, %9, %c-2147483648_i64_3 : i64 loc(#loc28)
    %12 = arith.andi %10, %11 : i1 loc(#loc28)
    %13 = arith.subi %6, %c1_i32_1 : i32 loc(#loc28)
    %c512_i32_4 = arith.constant 512 : i32 loc(#loc29)
    %c512_i32_5 = arith.constant 512 : i32 loc(#loc29)
    %14 = arith.divsi %13, %c512_i32_5 : i32 loc(#loc29)
    tt.return %14 : i32 loc(#loc30)
  ^bb1:  // no predecessors
    %15 = ub.poison : i32 loc(#loc31)
    tt.return %15 : i32 loc(#loc31)
  } loc(#loc26)
} loc(#loc)
#loc1 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":962:24)
#loc2 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":962:30)
#loc3 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":964:46)
#loc4 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":964:25)
#loc5 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":965:40)
#loc6 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":965:22)
#loc7 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":968:30)
#loc8 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":969:19)
#loc9 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":970:50)
#loc10 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":970:32)
#loc11 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":970:24)
#loc12 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":970:8)
#loc13 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":972:32)
#loc14 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":973:19)
#loc15 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":974:30)
#loc16 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":974:48)
#loc17 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":974:44)
#loc18 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":978:26)
#loc19 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":976:24)
#loc20 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":976:39)
#loc21 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":977:25)
#loc22 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":977:12)
#loc23 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":980:32)
#loc24 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":980:37)
#loc25 = loc("/sgl-workspace/sglang/python/sglang/srt/model_executor/forward_batch_info.py":980:4)
#loc27 = loc("/usr/local/lib/python3.12/dist-packages/triton/language/standard.py":40:16)
#loc28 = loc("/usr/local/lib/python3.12/dist-packages/triton/language/standard.py":40:22)
#loc29 = loc("/usr/local/lib/python3.12/dist-packages/triton/language/standard.py":40:28)
#loc30 = loc("/usr/local/lib/python3.12/dist-packages/triton/language/standard.py":40:11)
#loc31 = loc("/usr/local/lib/python3.12/dist-packages/triton/language/standard.py":40:4)
