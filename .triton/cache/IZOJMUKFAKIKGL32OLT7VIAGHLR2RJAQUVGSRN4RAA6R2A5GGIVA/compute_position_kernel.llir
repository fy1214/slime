; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @compute_position_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = zext nneg i32 %6 to i64, !dbg !9
  %8 = getelementptr i32, ptr addrspace(1) %2, i64 %7, !dbg !10
  %9 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %8) #2, !dbg !11
  %10 = getelementptr i32, ptr addrspace(1) %3, i64 %7, !dbg !12
  %11 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %10) #2, !dbg !13
  %.not = icmp eq i32 %6, 0, !dbg !14
  br i1 %.not, label %._crit_edge, label %.lr.ph, !dbg !14

.lr.ph:                                           ; preds = %5, %.lr.ph
  %12 = phi i64 [ %17, %.lr.ph ], [ 0, %5 ]
  %13 = phi i64 [ %18, %.lr.ph ], [ 0, %5 ]
  %14 = getelementptr i32, ptr addrspace(1) %3, i64 %13, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %14) #2, !dbg !16
  %16 = sext i32 %15 to i64, !dbg !17
  %17 = add i64 %12, %16, !dbg !17
  %18 = add nuw nsw i64 %13, 1, !dbg !14
  %exitcond.not = icmp eq i64 %18, %7, !dbg !14
  br i1 %exitcond.not, label %._crit_edge, label %.lr.ph, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %5
  %.lcssa = phi i64 [ 0, %5 ], [ %17, %.lr.ph ], !dbg !18
  %19 = add i32 %11, 511, !dbg !19
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %.lcssa, !dbg !24
  %22 = icmp sgt i32 %19, 511, !dbg !25
  br i1 %22, label %.lr.ph4.preheader, label %._crit_edge5, !dbg !25

.lr.ph4.preheader:                                ; preds = %._crit_edge
  %23 = and i32 %20, 127, !dbg !23
  %24 = lshr i32 %19, 9, !dbg !26
  %25 = zext nneg i32 %23 to i64, !dbg !25
  %26 = zext nneg i32 %11 to i64, !dbg !25
  %wide.trip.count = zext nneg i32 %24 to i64, !dbg !25
  br label %.lr.ph4, !dbg !25

.lr.ph4:                                          ; preds = %.lr.ph4.preheader, %.lr.ph4
  %indvars.iv = phi i64 [ 0, %.lr.ph4.preheader ], [ %indvars.iv.next, %.lr.ph4 ]
  %27 = shl i64 %indvars.iv, 9, !dbg !27
  %28 = or disjoint i64 %27, %25, !dbg !28
  %29 = or disjoint i64 %28, 128, !dbg !28
  %30 = or disjoint i64 %28, 256, !dbg !28
  %31 = or disjoint i64 %28, 384, !dbg !28
  %32 = icmp slt i64 %28, %26, !dbg !29
  %33 = icmp slt i64 %29, %26, !dbg !29
  %34 = icmp slt i64 %30, %26, !dbg !29
  %35 = icmp slt i64 %31, %26, !dbg !29
  %36 = getelementptr i64, ptr addrspace(1) %21, i64 %28, !dbg !30
  %37 = getelementptr i64, ptr addrspace(1) %21, i64 %29, !dbg !30
  %38 = getelementptr i64, ptr addrspace(1) %21, i64 %30, !dbg !30
  %39 = getelementptr i64, ptr addrspace(1) %21, i64 %31, !dbg !30
  %40 = trunc nuw nsw i64 %28 to i32, !dbg !31
  %41 = add i32 %9, %40, !dbg !31
  %42 = trunc nuw nsw i64 %29 to i32, !dbg !31
  %43 = add i32 %9, %42, !dbg !31
  %44 = trunc nuw nsw i64 %30 to i32, !dbg !31
  %45 = add i32 %9, %44, !dbg !31
  %46 = trunc nuw nsw i64 %31 to i32, !dbg !31
  %47 = add i32 %9, %46, !dbg !31
  %48 = sext i32 %41 to i64, !dbg !32
  %49 = sext i32 %43 to i64, !dbg !32
  %50 = sext i32 %45 to i64, !dbg !32
  %51 = sext i32 %47 to i64, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %48, ptr addrspace(1) %36, i1 %32) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %49, ptr addrspace(1) %37, i1 %33) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %50, ptr addrspace(1) %38, i1 %34) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %51, ptr addrspace(1) %39, i1 %35) #2, !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !25
  %exitcond7.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !25
  br i1 %exitcond7.not, label %._crit_edge5, label %.lr.ph4, !dbg !25

._crit_edge5:                                     ; preds = %.lr.ph4, %._crit_edge
  %52 = getelementptr i32, ptr addrspace(1) %1, i64 %7, !dbg !33
  %53 = trunc i64 %.lcssa to i32, !dbg !34
  %54 = icmp eq i32 %20, 0, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %53, ptr addrspace(1) %52, i1 %54) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "forward_batch_info.py", directory: "/sgl-workspace/sglang/python/sglang/srt/model_executor")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "compute_position_kernel", linkageName: "compute_position_kernel", scope: !1, file: !1, line: 954, type: !6, scopeLine: 954, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 962, column: 24, scope: !5)
!9 = !DILocation(line: 962, column: 30, scope: !5)
!10 = !DILocation(line: 964, column: 46, scope: !5)
!11 = !DILocation(line: 964, column: 25, scope: !5)
!12 = !DILocation(line: 965, column: 40, scope: !5)
!13 = !DILocation(line: 965, column: 22, scope: !5)
!14 = !DILocation(line: 969, column: 19, scope: !5)
!15 = !DILocation(line: 970, column: 50, scope: !5)
!16 = !DILocation(line: 970, column: 32, scope: !5)
!17 = !DILocation(line: 970, column: 24, scope: !5)
!18 = !DILocation(line: 968, column: 30, scope: !5)
!19 = !DILocation(line: 40, column: 22, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !5, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.12/dist-packages/triton/language")
!22 = !DILocation(line: 972, column: 32, scope: !5)
!23 = !DILocation(line: 974, column: 30, scope: !5)
!24 = !DILocation(line: 976, column: 24, scope: !5)
!25 = !DILocation(line: 973, column: 19, scope: !5)
!26 = !DILocation(line: 40, column: 28, scope: !20, inlinedAt: !22)
!27 = !DILocation(line: 974, column: 48, scope: !5)
!28 = !DILocation(line: 974, column: 44, scope: !5)
!29 = !DILocation(line: 978, column: 26, scope: !5)
!30 = !DILocation(line: 976, column: 39, scope: !5)
!31 = !DILocation(line: 977, column: 25, scope: !5)
!32 = !DILocation(line: 977, column: 12, scope: !5)
!33 = !DILocation(line: 980, column: 32, scope: !5)
!34 = !DILocation(line: 980, column: 37, scope: !5)
!35 = !DILocation(line: 980, column: 4, scope: !5)
